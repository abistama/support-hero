/*
 * This file is generated by jOOQ.
 */
package com.abistama.supporthero.infrastructure.generated.tables


import com.abistama.supporthero.infrastructure.generated.Public
import com.abistama.supporthero.infrastructure.generated.keys.JIRA_TENANT_PKEY
import com.abistama.supporthero.infrastructure.generated.keys.SLACK_TO_JIRA_TENANT__FK_SLACK_TO_JIRA_TENANT_JIRA_TENANT
import com.abistama.supporthero.infrastructure.generated.keys.UK_JIRA_TENANT
import com.abistama.supporthero.infrastructure.generated.tables.SlackTenant.SlackTenantPath
import com.abistama.supporthero.infrastructure.generated.tables.SlackToJiraTenant.SlackToJiraTenantPath
import com.abistama.supporthero.infrastructure.generated.tables.records.JiraTenantRecord

import java.time.LocalDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JiraTenant(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JiraTenantRecord>?,
    parentPath: InverseForeignKey<out Record, JiraTenantRecord>?,
    aliased: Table<JiraTenantRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<JiraTenantRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.jira_tenant</code>
         */
        val JIRA_TENANT: JiraTenant = JiraTenant()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JiraTenantRecord> = JiraTenantRecord::class.java

    /**
     * The column <code>public.jira_tenant.id</code>.
     */
    val ID: TableField<JiraTenantRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.jira_tenant.cloud_id</code>.
     */
    val CLOUD_ID: TableField<JiraTenantRecord, String?> = createField(DSL.name("cloud_id"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.jira_tenant.access_token</code>.
     */
    val ACCESS_TOKEN: TableField<JiraTenantRecord, String?> = createField(DSL.name("access_token"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.jira_tenant.refresh_token</code>.
     */
    val REFRESH_TOKEN: TableField<JiraTenantRecord, String?> = createField(DSL.name("refresh_token"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.jira_tenant.expires_in</code>.
     */
    val EXPIRES_IN: TableField<JiraTenantRecord, LocalDateTime?> = createField(DSL.name("expires_in"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.jira_tenant.scopes</code>.
     */
    val SCOPES: TableField<JiraTenantRecord, String?> = createField(DSL.name("scopes"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.jira_tenant.created_at</code>.
     */
    val CREATED_AT: TableField<JiraTenantRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.jira_tenant.updated_at</code>.
     */
    val UPDATED_AT: TableField<JiraTenantRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<JiraTenantRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<JiraTenantRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<JiraTenantRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.jira_tenant</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.jira_tenant</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.jira_tenant</code> table reference
     */
    constructor(): this(DSL.name("jira_tenant"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JiraTenantRecord>?, parentPath: InverseForeignKey<out Record, JiraTenantRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, JIRA_TENANT, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class JiraTenantPath : JiraTenant, Path<JiraTenantRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JiraTenantRecord>?, parentPath: InverseForeignKey<out Record, JiraTenantRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<JiraTenantRecord>): super(alias, aliased)
        override fun `as`(alias: String): JiraTenantPath = JiraTenantPath(DSL.name(alias), this)
        override fun `as`(alias: Name): JiraTenantPath = JiraTenantPath(alias, this)
        override fun `as`(alias: Table<*>): JiraTenantPath = JiraTenantPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<JiraTenantRecord> = JIRA_TENANT_PKEY
    override fun getUniqueKeys(): List<UniqueKey<JiraTenantRecord>> = listOf(UK_JIRA_TENANT)

    private lateinit var _slackToJiraTenant: SlackToJiraTenantPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.slack_to_jira_tenant</code> table
     */
    fun slackToJiraTenant(): SlackToJiraTenantPath {
        if (!this::_slackToJiraTenant.isInitialized)
            _slackToJiraTenant = SlackToJiraTenantPath(this, null, SLACK_TO_JIRA_TENANT__FK_SLACK_TO_JIRA_TENANT_JIRA_TENANT.inverseKey)

        return _slackToJiraTenant;
    }

    val slackToJiraTenant: SlackToJiraTenantPath
        get(): SlackToJiraTenantPath = slackToJiraTenant()

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.slack_tenant</code> table
     */
    val slackTenant: SlackTenantPath
        get(): SlackTenantPath = slackToJiraTenant().slackTenant()
    override fun `as`(alias: String): JiraTenant = JiraTenant(DSL.name(alias), this)
    override fun `as`(alias: Name): JiraTenant = JiraTenant(alias, this)
    override fun `as`(alias: Table<*>): JiraTenant = JiraTenant(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JiraTenant = JiraTenant(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JiraTenant = JiraTenant(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JiraTenant = JiraTenant(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): JiraTenant = JiraTenant(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JiraTenant = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): JiraTenant = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): JiraTenant = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JiraTenant = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JiraTenant = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JiraTenant = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JiraTenant = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JiraTenant = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JiraTenant = where(DSL.notExists(select))
}
