/*
 * This file is generated by jOOQ.
 */
package com.abistama.supporthero.infrastructure.generated.keys


import com.abistama.supporthero.infrastructure.generated.tables.Databasechangeloglock
import com.abistama.supporthero.infrastructure.generated.tables.JiraTenant
import com.abistama.supporthero.infrastructure.generated.tables.JiraTicketCsat
import com.abistama.supporthero.infrastructure.generated.tables.JiraTicketTracking
import com.abistama.supporthero.infrastructure.generated.tables.Shedlock
import com.abistama.supporthero.infrastructure.generated.tables.SlackTenant
import com.abistama.supporthero.infrastructure.generated.tables.SlackToJiraConfiguration
import com.abistama.supporthero.infrastructure.generated.tables.SlackToJiraTenant
import com.abistama.supporthero.infrastructure.generated.tables.records.DatabasechangeloglockRecord
import com.abistama.supporthero.infrastructure.generated.tables.records.JiraTenantRecord
import com.abistama.supporthero.infrastructure.generated.tables.records.JiraTicketCsatRecord
import com.abistama.supporthero.infrastructure.generated.tables.records.JiraTicketTrackingRecord
import com.abistama.supporthero.infrastructure.generated.tables.records.ShedlockRecord
import com.abistama.supporthero.infrastructure.generated.tables.records.SlackTenantRecord
import com.abistama.supporthero.infrastructure.generated.tables.records.SlackToJiraConfigurationRecord
import com.abistama.supporthero.infrastructure.generated.tables.records.SlackToJiraTenantRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val DATABASECHANGELOGLOCK_PKEY: UniqueKey<DatabasechangeloglockRecord> = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), arrayOf(Databasechangeloglock.DATABASECHANGELOGLOCK.ID), true)
val JIRA_TENANT_PKEY: UniqueKey<JiraTenantRecord> = Internal.createUniqueKey(JiraTenant.JIRA_TENANT, DSL.name("jira_tenant_pkey"), arrayOf(JiraTenant.JIRA_TENANT.ID), true)
val UK_JIRA_TENANT: UniqueKey<JiraTenantRecord> = Internal.createUniqueKey(JiraTenant.JIRA_TENANT, DSL.name("uk_jira_tenant"), arrayOf(JiraTenant.JIRA_TENANT.CLOUD_ID), true)
val JIRA_TICKET_CSAT_PKEY: UniqueKey<JiraTicketCsatRecord> = Internal.createUniqueKey(JiraTicketCsat.JIRA_TICKET_CSAT, DSL.name("jira_ticket_csat_pkey"), arrayOf(JiraTicketCsat.JIRA_TICKET_CSAT.ID), true)
val UK_JIRA_TICKET_CSAT_TICKET_KEY: UniqueKey<JiraTicketCsatRecord> = Internal.createUniqueKey(JiraTicketCsat.JIRA_TICKET_CSAT, DSL.name("uk_jira_ticket_csat_ticket_key"), arrayOf(JiraTicketCsat.JIRA_TICKET_CSAT.TICKET_KEY, JiraTicketCsat.JIRA_TICKET_CSAT.SLACK_TO_JIRA_TENANT_ID), true)
val JIRA_TICKET_TRACKING_PKEY: UniqueKey<JiraTicketTrackingRecord> = Internal.createUniqueKey(JiraTicketTracking.JIRA_TICKET_TRACKING, DSL.name("jira_ticket_tracking_pkey"), arrayOf(JiraTicketTracking.JIRA_TICKET_TRACKING.ID), true)
val UK_JIRA_TICKET_TRACKING_JIRA_ISSUE: UniqueKey<JiraTicketTrackingRecord> = Internal.createUniqueKey(JiraTicketTracking.JIRA_TICKET_TRACKING, DSL.name("uk_jira_ticket_tracking_jira_issue"), arrayOf(JiraTicketTracking.JIRA_TICKET_TRACKING.JIRA_ISSUE, JiraTicketTracking.JIRA_TICKET_TRACKING.SLACK_TO_JIRA_TENANT_ID), true)
val SHEDLOCK_PKEY: UniqueKey<ShedlockRecord> = Internal.createUniqueKey(Shedlock.SHEDLOCK, DSL.name("shedlock_pkey"), arrayOf(Shedlock.SHEDLOCK.NAME), true)
val SLACK_TENANT_PKEY: UniqueKey<SlackTenantRecord> = Internal.createUniqueKey(SlackTenant.SLACK_TENANT, DSL.name("slack_tenant_pkey"), arrayOf(SlackTenant.SLACK_TENANT.ID), true)
val UK_SLACK_TENANT: UniqueKey<SlackTenantRecord> = Internal.createUniqueKey(SlackTenant.SLACK_TENANT, DSL.name("uk_slack_tenant"), arrayOf(SlackTenant.SLACK_TENANT.SLACK_TEAM_ID), true)
val SLACK_TO_JIRA_CONFIGURATION_PKEY: UniqueKey<SlackToJiraConfigurationRecord> = Internal.createUniqueKey(SlackToJiraConfiguration.SLACK_TO_JIRA_CONFIGURATION, DSL.name("slack_to_jira_configuration_pkey"), arrayOf(SlackToJiraConfiguration.SLACK_TO_JIRA_CONFIGURATION.ID), true)
val SLACK_TO_JIRA_TENANT_PKEY: UniqueKey<SlackToJiraTenantRecord> = Internal.createUniqueKey(SlackToJiraTenant.SLACK_TO_JIRA_TENANT, DSL.name("slack_to_jira_tenant_pkey"), arrayOf(SlackToJiraTenant.SLACK_TO_JIRA_TENANT.ID), true)
val UK_SLACK_TO_JIRA_TENANT: UniqueKey<SlackToJiraTenantRecord> = Internal.createUniqueKey(SlackToJiraTenant.SLACK_TO_JIRA_TENANT, DSL.name("uk_slack_to_jira_tenant"), arrayOf(SlackToJiraTenant.SLACK_TO_JIRA_TENANT.SLACK_TENANT_ID, SlackToJiraTenant.SLACK_TO_JIRA_TENANT.JIRA_TENANT_ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val JIRA_TICKET_CSAT__FK_JIRA_TICKETS_CSAT_SLACK_TO_JIRA_TENANT: ForeignKey<JiraTicketCsatRecord, SlackToJiraTenantRecord> = Internal.createForeignKey(JiraTicketCsat.JIRA_TICKET_CSAT, DSL.name("fk_jira_tickets_csat_slack_to_jira_tenant"), arrayOf(JiraTicketCsat.JIRA_TICKET_CSAT.SLACK_TO_JIRA_TENANT_ID), com.abistama.supporthero.infrastructure.generated.keys.SLACK_TO_JIRA_TENANT_PKEY, arrayOf(SlackToJiraTenant.SLACK_TO_JIRA_TENANT.ID), true)
val JIRA_TICKET_TRACKING__FK_JIRA_TICKETS_TRACKING_SLACK_TO_JIRA_TENANT: ForeignKey<JiraTicketTrackingRecord, SlackToJiraTenantRecord> = Internal.createForeignKey(JiraTicketTracking.JIRA_TICKET_TRACKING, DSL.name("fk_jira_tickets_tracking_slack_to_jira_tenant"), arrayOf(JiraTicketTracking.JIRA_TICKET_TRACKING.SLACK_TO_JIRA_TENANT_ID), com.abistama.supporthero.infrastructure.generated.keys.SLACK_TO_JIRA_TENANT_PKEY, arrayOf(SlackToJiraTenant.SLACK_TO_JIRA_TENANT.ID), true)
val SLACK_TO_JIRA_CONFIGURATION__FK_SLACK_TO_JIRA_CONFIGURATION_SLACK_TO_JIRA_TENANT: ForeignKey<SlackToJiraConfigurationRecord, SlackToJiraTenantRecord> = Internal.createForeignKey(SlackToJiraConfiguration.SLACK_TO_JIRA_CONFIGURATION, DSL.name("fk_slack_to_jira_configuration_slack_to_jira_tenant"), arrayOf(SlackToJiraConfiguration.SLACK_TO_JIRA_CONFIGURATION.SLACK_TO_JIRA_TENANT_ID), com.abistama.supporthero.infrastructure.generated.keys.SLACK_TO_JIRA_TENANT_PKEY, arrayOf(SlackToJiraTenant.SLACK_TO_JIRA_TENANT.ID), true)
val SLACK_TO_JIRA_TENANT__FK_SLACK_TO_JIRA_TENANT_JIRA_TENANT: ForeignKey<SlackToJiraTenantRecord, JiraTenantRecord> = Internal.createForeignKey(SlackToJiraTenant.SLACK_TO_JIRA_TENANT, DSL.name("fk_slack_to_jira_tenant_jira_tenant"), arrayOf(SlackToJiraTenant.SLACK_TO_JIRA_TENANT.JIRA_TENANT_ID), com.abistama.supporthero.infrastructure.generated.keys.JIRA_TENANT_PKEY, arrayOf(JiraTenant.JIRA_TENANT.ID), true)
val SLACK_TO_JIRA_TENANT__FK_SLACK_TO_JIRA_TENANT_SLACK_TENANT: ForeignKey<SlackToJiraTenantRecord, SlackTenantRecord> = Internal.createForeignKey(SlackToJiraTenant.SLACK_TO_JIRA_TENANT, DSL.name("fk_slack_to_jira_tenant_slack_tenant"), arrayOf(SlackToJiraTenant.SLACK_TO_JIRA_TENANT.SLACK_TENANT_ID), com.abistama.supporthero.infrastructure.generated.keys.SLACK_TENANT_PKEY, arrayOf(SlackTenant.SLACK_TENANT.ID), true)
