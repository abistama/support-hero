/*
 * This file is generated by jOOQ.
 */
package com.abistama.supporthero.infrastructure.generated.tables


import com.abistama.supporthero.infrastructure.generated.Public
import com.abistama.supporthero.infrastructure.generated.keys.JIRA_TICKET_CSAT__FK_JIRA_TICKETS_CSAT_SLACK_TO_JIRA_TENANT
import com.abistama.supporthero.infrastructure.generated.keys.JIRA_TICKET_TRACKING__FK_JIRA_TICKETS_TRACKING_SLACK_TO_JIRA_TENANT
import com.abistama.supporthero.infrastructure.generated.keys.SLACK_TO_JIRA_CONFIGURATION__FK_SLACK_TO_JIRA_CONFIGURATION_SLACK_TO_JIRA_TENANT
import com.abistama.supporthero.infrastructure.generated.keys.SLACK_TO_JIRA_TENANT_PKEY
import com.abistama.supporthero.infrastructure.generated.keys.SLACK_TO_JIRA_TENANT__FK_SLACK_TO_JIRA_TENANT_JIRA_TENANT
import com.abistama.supporthero.infrastructure.generated.keys.SLACK_TO_JIRA_TENANT__FK_SLACK_TO_JIRA_TENANT_SLACK_TENANT
import com.abistama.supporthero.infrastructure.generated.keys.UK_SLACK_TO_JIRA_TENANT
import com.abistama.supporthero.infrastructure.generated.tables.JiraTenant.JiraTenantPath
import com.abistama.supporthero.infrastructure.generated.tables.JiraTicketCsat.JiraTicketCsatPath
import com.abistama.supporthero.infrastructure.generated.tables.JiraTicketTracking.JiraTicketTrackingPath
import com.abistama.supporthero.infrastructure.generated.tables.SlackTenant.SlackTenantPath
import com.abistama.supporthero.infrastructure.generated.tables.SlackToJiraConfiguration.SlackToJiraConfigurationPath
import com.abistama.supporthero.infrastructure.generated.tables.records.SlackToJiraTenantRecord

import java.time.LocalDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SlackToJiraTenant(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, SlackToJiraTenantRecord>?,
    parentPath: InverseForeignKey<out Record, SlackToJiraTenantRecord>?,
    aliased: Table<SlackToJiraTenantRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<SlackToJiraTenantRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.slack_to_jira_tenant</code>
         */
        val SLACK_TO_JIRA_TENANT: SlackToJiraTenant = SlackToJiraTenant()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SlackToJiraTenantRecord> = SlackToJiraTenantRecord::class.java

    /**
     * The column <code>public.slack_to_jira_tenant.id</code>.
     */
    val ID: TableField<SlackToJiraTenantRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.slack_to_jira_tenant.slack_tenant_id</code>.
     */
    val SLACK_TENANT_ID: TableField<SlackToJiraTenantRecord, UUID?> = createField(DSL.name("slack_tenant_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.slack_to_jira_tenant.jira_tenant_id</code>.
     */
    val JIRA_TENANT_ID: TableField<SlackToJiraTenantRecord, UUID?> = createField(DSL.name("jira_tenant_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.slack_to_jira_tenant.created_at</code>.
     */
    val CREATED_AT: TableField<SlackToJiraTenantRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.slack_to_jira_tenant.updated_at</code>.
     */
    val UPDATED_AT: TableField<SlackToJiraTenantRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<SlackToJiraTenantRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<SlackToJiraTenantRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<SlackToJiraTenantRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.slack_to_jira_tenant</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.slack_to_jira_tenant</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.slack_to_jira_tenant</code> table reference
     */
    constructor(): this(DSL.name("slack_to_jira_tenant"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, SlackToJiraTenantRecord>?, parentPath: InverseForeignKey<out Record, SlackToJiraTenantRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, SLACK_TO_JIRA_TENANT, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class SlackToJiraTenantPath : SlackToJiraTenant, Path<SlackToJiraTenantRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, SlackToJiraTenantRecord>?, parentPath: InverseForeignKey<out Record, SlackToJiraTenantRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<SlackToJiraTenantRecord>): super(alias, aliased)
        override fun `as`(alias: String): SlackToJiraTenantPath = SlackToJiraTenantPath(DSL.name(alias), this)
        override fun `as`(alias: Name): SlackToJiraTenantPath = SlackToJiraTenantPath(alias, this)
        override fun `as`(alias: Table<*>): SlackToJiraTenantPath = SlackToJiraTenantPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<SlackToJiraTenantRecord> = SLACK_TO_JIRA_TENANT_PKEY
    override fun getUniqueKeys(): List<UniqueKey<SlackToJiraTenantRecord>> = listOf(UK_SLACK_TO_JIRA_TENANT)
    override fun getReferences(): List<ForeignKey<SlackToJiraTenantRecord, *>> = listOf(SLACK_TO_JIRA_TENANT__FK_SLACK_TO_JIRA_TENANT_SLACK_TENANT, SLACK_TO_JIRA_TENANT__FK_SLACK_TO_JIRA_TENANT_JIRA_TENANT)

    private lateinit var _slackTenant: SlackTenantPath

    /**
     * Get the implicit join path to the <code>public.slack_tenant</code> table.
     */
    fun slackTenant(): SlackTenantPath {
        if (!this::_slackTenant.isInitialized)
            _slackTenant = SlackTenantPath(this, SLACK_TO_JIRA_TENANT__FK_SLACK_TO_JIRA_TENANT_SLACK_TENANT, null)

        return _slackTenant;
    }

    val slackTenant: SlackTenantPath
        get(): SlackTenantPath = slackTenant()

    private lateinit var _jiraTenant: JiraTenantPath

    /**
     * Get the implicit join path to the <code>public.jira_tenant</code> table.
     */
    fun jiraTenant(): JiraTenantPath {
        if (!this::_jiraTenant.isInitialized)
            _jiraTenant = JiraTenantPath(this, SLACK_TO_JIRA_TENANT__FK_SLACK_TO_JIRA_TENANT_JIRA_TENANT, null)

        return _jiraTenant;
    }

    val jiraTenant: JiraTenantPath
        get(): JiraTenantPath = jiraTenant()

    private lateinit var _jiraTicketCsat: JiraTicketCsatPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.jira_ticket_csat</code> table
     */
    fun jiraTicketCsat(): JiraTicketCsatPath {
        if (!this::_jiraTicketCsat.isInitialized)
            _jiraTicketCsat = JiraTicketCsatPath(this, null, JIRA_TICKET_CSAT__FK_JIRA_TICKETS_CSAT_SLACK_TO_JIRA_TENANT.inverseKey)

        return _jiraTicketCsat;
    }

    val jiraTicketCsat: JiraTicketCsatPath
        get(): JiraTicketCsatPath = jiraTicketCsat()

    private lateinit var _jiraTicketTracking: JiraTicketTrackingPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.jira_ticket_tracking</code> table
     */
    fun jiraTicketTracking(): JiraTicketTrackingPath {
        if (!this::_jiraTicketTracking.isInitialized)
            _jiraTicketTracking = JiraTicketTrackingPath(this, null, JIRA_TICKET_TRACKING__FK_JIRA_TICKETS_TRACKING_SLACK_TO_JIRA_TENANT.inverseKey)

        return _jiraTicketTracking;
    }

    val jiraTicketTracking: JiraTicketTrackingPath
        get(): JiraTicketTrackingPath = jiraTicketTracking()

    private lateinit var _slackToJiraConfiguration: SlackToJiraConfigurationPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.slack_to_jira_configuration</code> table
     */
    fun slackToJiraConfiguration(): SlackToJiraConfigurationPath {
        if (!this::_slackToJiraConfiguration.isInitialized)
            _slackToJiraConfiguration = SlackToJiraConfigurationPath(this, null, SLACK_TO_JIRA_CONFIGURATION__FK_SLACK_TO_JIRA_CONFIGURATION_SLACK_TO_JIRA_TENANT.inverseKey)

        return _slackToJiraConfiguration;
    }

    val slackToJiraConfiguration: SlackToJiraConfigurationPath
        get(): SlackToJiraConfigurationPath = slackToJiraConfiguration()
    override fun `as`(alias: String): SlackToJiraTenant = SlackToJiraTenant(DSL.name(alias), this)
    override fun `as`(alias: Name): SlackToJiraTenant = SlackToJiraTenant(alias, this)
    override fun `as`(alias: Table<*>): SlackToJiraTenant = SlackToJiraTenant(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SlackToJiraTenant = SlackToJiraTenant(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SlackToJiraTenant = SlackToJiraTenant(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): SlackToJiraTenant = SlackToJiraTenant(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): SlackToJiraTenant = SlackToJiraTenant(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): SlackToJiraTenant = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): SlackToJiraTenant = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): SlackToJiraTenant = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): SlackToJiraTenant = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): SlackToJiraTenant = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): SlackToJiraTenant = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): SlackToJiraTenant = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): SlackToJiraTenant = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): SlackToJiraTenant = where(DSL.notExists(select))
}
