/*
 * This file is generated by jOOQ.
 */
package com.abistama.supporthero.infrastructure.generated.tables


import com.abistama.supporthero.infrastructure.generated.Public
import com.abistama.supporthero.infrastructure.generated.indexes.IDX_JIRA_TICKET_CSAT_REMINDERS_CSAT
import com.abistama.supporthero.infrastructure.generated.indexes.IDX_JIRA_TICKET_NO_CSAT
import com.abistama.supporthero.infrastructure.generated.keys.JIRA_TICKET_CSAT_PKEY
import com.abistama.supporthero.infrastructure.generated.keys.JIRA_TICKET_CSAT__FK_JIRA_TICKETS_CSAT_SLACK_TO_JIRA_TENANT
import com.abistama.supporthero.infrastructure.generated.keys.UK_JIRA_TICKET_CSAT_TICKET_KEY
import com.abistama.supporthero.infrastructure.generated.tables.SlackToJiraTenant.SlackToJiraTenantPath
import com.abistama.supporthero.infrastructure.generated.tables.records.JiraTicketCsatRecord

import java.time.LocalDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JiraTicketCsat(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JiraTicketCsatRecord>?,
    parentPath: InverseForeignKey<out Record, JiraTicketCsatRecord>?,
    aliased: Table<JiraTicketCsatRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<JiraTicketCsatRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.jira_ticket_csat</code>
         */
        val JIRA_TICKET_CSAT: JiraTicketCsat = JiraTicketCsat()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JiraTicketCsatRecord> = JiraTicketCsatRecord::class.java

    /**
     * The column <code>public.jira_ticket_csat.id</code>.
     */
    val ID: TableField<JiraTicketCsatRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.jira_ticket_csat.ticket_key</code>.
     */
    val TICKET_KEY: TableField<JiraTicketCsatRecord, String?> = createField(DSL.name("ticket_key"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.jira_ticket_csat.project_key</code>.
     */
    val PROJECT_KEY: TableField<JiraTicketCsatRecord, String?> = createField(DSL.name("project_key"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.jira_ticket_csat.slack_to_jira_tenant_id</code>.
     */
    val SLACK_TO_JIRA_TENANT_ID: TableField<JiraTicketCsatRecord, UUID?> = createField(DSL.name("slack_to_jira_tenant_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.jira_ticket_csat.csat_value</code>.
     */
    val CSAT_VALUE: TableField<JiraTicketCsatRecord, Int?> = createField(DSL.name("csat_value"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.jira_ticket_csat.send_to</code>.
     */
    val SEND_TO: TableField<JiraTicketCsatRecord, String?> = createField(DSL.name("send_to"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.jira_ticket_csat.number_reminders</code>.
     */
    val NUMBER_REMINDERS: TableField<JiraTicketCsatRecord, Int?> = createField(DSL.name("number_reminders"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.jira_ticket_csat.next_reminder_at</code>.
     */
    val NEXT_REMINDER_AT: TableField<JiraTicketCsatRecord, LocalDateTime?> = createField(DSL.name("next_reminder_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.jira_ticket_csat.created_at</code>.
     */
    val CREATED_AT: TableField<JiraTicketCsatRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.jira_ticket_csat.updated_at</code>.
     */
    val UPDATED_AT: TableField<JiraTicketCsatRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<JiraTicketCsatRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<JiraTicketCsatRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<JiraTicketCsatRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.jira_ticket_csat</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.jira_ticket_csat</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.jira_ticket_csat</code> table reference
     */
    constructor(): this(DSL.name("jira_ticket_csat"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JiraTicketCsatRecord>?, parentPath: InverseForeignKey<out Record, JiraTicketCsatRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, JIRA_TICKET_CSAT, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class JiraTicketCsatPath : JiraTicketCsat, Path<JiraTicketCsatRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JiraTicketCsatRecord>?, parentPath: InverseForeignKey<out Record, JiraTicketCsatRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<JiraTicketCsatRecord>): super(alias, aliased)
        override fun `as`(alias: String): JiraTicketCsatPath = JiraTicketCsatPath(DSL.name(alias), this)
        override fun `as`(alias: Name): JiraTicketCsatPath = JiraTicketCsatPath(alias, this)
        override fun `as`(alias: Table<*>): JiraTicketCsatPath = JiraTicketCsatPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_JIRA_TICKET_CSAT_REMINDERS_CSAT, IDX_JIRA_TICKET_NO_CSAT)
    override fun getPrimaryKey(): UniqueKey<JiraTicketCsatRecord> = JIRA_TICKET_CSAT_PKEY
    override fun getUniqueKeys(): List<UniqueKey<JiraTicketCsatRecord>> = listOf(UK_JIRA_TICKET_CSAT_TICKET_KEY)
    override fun getReferences(): List<ForeignKey<JiraTicketCsatRecord, *>> = listOf(JIRA_TICKET_CSAT__FK_JIRA_TICKETS_CSAT_SLACK_TO_JIRA_TENANT)

    private lateinit var _slackToJiraTenant: SlackToJiraTenantPath

    /**
     * Get the implicit join path to the
     * <code>public.slack_to_jira_tenant</code> table.
     */
    fun slackToJiraTenant(): SlackToJiraTenantPath {
        if (!this::_slackToJiraTenant.isInitialized)
            _slackToJiraTenant = SlackToJiraTenantPath(this, JIRA_TICKET_CSAT__FK_JIRA_TICKETS_CSAT_SLACK_TO_JIRA_TENANT, null)

        return _slackToJiraTenant;
    }

    val slackToJiraTenant: SlackToJiraTenantPath
        get(): SlackToJiraTenantPath = slackToJiraTenant()
    override fun `as`(alias: String): JiraTicketCsat = JiraTicketCsat(DSL.name(alias), this)
    override fun `as`(alias: Name): JiraTicketCsat = JiraTicketCsat(alias, this)
    override fun `as`(alias: Table<*>): JiraTicketCsat = JiraTicketCsat(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JiraTicketCsat = JiraTicketCsat(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JiraTicketCsat = JiraTicketCsat(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JiraTicketCsat = JiraTicketCsat(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): JiraTicketCsat = JiraTicketCsat(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JiraTicketCsat = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): JiraTicketCsat = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): JiraTicketCsat = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JiraTicketCsat = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JiraTicketCsat = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JiraTicketCsat = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JiraTicketCsat = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JiraTicketCsat = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JiraTicketCsat = where(DSL.notExists(select))
}
